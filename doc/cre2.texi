\input texinfo.tex
@c %**start of header
@setfilename cre2.info
@settitle C wrapper for RE2
@c %**end of header

@include version.texi

@c page
@c ------------------------------------------------------------
@c License macros.
@c ------------------------------------------------------------

@macro gnu{}
@acronym{GNU}
@end macro

@macro gpl{}
@acronym{GPL}
@end macro

@macro fdl{}
@acronym{FDL}
@end macro

@macro bsd{}
@acronym{BSD}
@end macro

@c ------------------------------------------------------------
@c Software related macros.
@c ------------------------------------------------------------

@macro bash{}
@command{bash}
@end macro

@macro gmp{}
@acronym{GMP}
@end macro

@macro gcc{}
@acronym{GCC}
@end macro

@macro glibc{}
@gnu{} C Library
@end macro

@c ------------------------------------------------------------
@c Network protocols acronyms.
@c ------------------------------------------------------------

@macro dns{}
@acronym{DNS}
@end macro

@macro ftp{}
@acronym{FTP}
@end macro

@macro dhcp{}
@acronym{DHCP}
@end macro

@macro icmp{}
@acronym{ICMP}
@end macro

@macro http{}
@acronym{HTTP}
@end macro

@macro https{}
@acronym{HTTP}
@end macro

@macro imap{}
@acronym{IMAP}
@end macro

@macro ip{}
@acronym{IP}
@end macro

@macro tcp{}
@acronym{TCP}
@end macro

@macro udp{}
@acronym{UDP}
@end macro

@macro ppp{}
@acronym{PPP}
@end macro

@macro sftp{}
@acronym{FTP}
@end macro

@macro smtp{}
@acronym{SMTP}
@end macro

@macro snmp{}
@acronym{SNMP}
@end macro

@macro ssh{}
@acronym{SSH}
@end macro

@macro ssl{}
@acronym{SSL}
@end macro

@macro tls{}
@acronym{TLS}
@end macro

@c ------------------------------------------------------------
@c Miscellaneous acronyms.
@c ------------------------------------------------------------

@macro adsl{}
@acronym{ADSL}
@end macro

@macro alsa{}
@acronym{ALSA}
@end macro

@macro ansi{}
@acronym{ANSI}
@end macro

@macro api{}
@acronym{API}
@end macro

@macro ascii{}
@acronym{ASCII}
@end macro

@macro asciiz{}
@acronym{ASCIIZ}
@end macro

@macro cdrom{}
@acronym{CDROM}
@end macro

@macro cli{}
@acronym{CLI}
@end macro

@macro cpu{}
@acronym{CPU}
@end macro

@macro gui{}
@acronym{GUI}
@end macro

@macro ieee{}
@acronym{IEEE}
@end macro

@macro isp{}
@acronym{ISP}
@end macro

@macro iso{}
@acronym{ISO}
@end macro

@macro mime{}
@acronym{MIME}
@end macro

@macro mpeg{}
@acronym{MPEG}
@end macro

@macro posix{}
@acronym{POSIX}
@end macro

@macro ram{}
@acronym{RAM}
@end macro

@macro rfc{}
@acronym{RFC}
@end macro

@c Remember that @url is already used by Texinfo.
@macro urla{}
@acronym{URL}
@end macro

@macro usb{}
@acronym{USB}
@end macro

@macro utf{}
@acronym{UTF}
@end macro

@macro uri{}
@acronym{URI}
@end macro

@macro xmla{}
@acronym{XML}
@end macro


@c ------------------------------------------------------------
@c Arguments macros.
@c ------------------------------------------------------------

@macro vari{ARG}
@var{\ARG\1}
@end macro

@macro varii{ARG}
@var{\ARG\2}
@end macro

@macro variii{ARG}
@var{\ARG\3}
@end macro

@macro variv{ARG}
@var{\ARG\4}
@end macro

@macro varn{ARG}
@var{\ARG\n}
@end macro

@macro vark{ARG}
@var{\ARG\k}
@end macro

@macro varj{ARG}
@var{\ARG\j}
@end macro

@c ------------------------------------------------------------

@macro meta{ARG}
<\ARG\>
@end macro

@macro metai{ARG}
@meta{\ARG\1}
@end macro

@macro metaii{ARG}
@meta{\ARG\2}
@end macro

@macro metaiii{ARG}
@meta{\ARG\3}
@end macro

@macro metaiv{ARG}
@meta{\ARG\4}
@end macro

@macro metan{ARG}
@meta{\ARG\n}
@end macro

@macro metak{ARG}
@meta{\ARG\k}
@end macro

@macro metaj{ARG}
@meta{\ARG\j}
@end macro

@c ------------------------------------------------------------
@c C language macros.
@c ------------------------------------------------------------

@macro cfunc{NAME}
@code{\NAME\()}
@end macro

@macro cnull{}
@code{NULL}
@end macro

@c ------------------------------------------------------------
@c Scheme language macros.
@c ------------------------------------------------------------

@macro clos{}
@acronym{CLOS}
@end macro

@macro library{NAME}
@code{(\NAME\)}
@end macro

@macro module{NAME}
@code{\NAME\}
@end macro

@macro repl{}
@acronym{REPL}
@end macro

@macro rnrs{VERSION}
@acronym{R\VERSION\RS}
@end macro

@macro srfi{}
@acronym{SRFI}
@end macro

@ignore
Separating the @srfi{} macro from the number with a '--' rather than a
'-' makes the expansion look ugly in menu entries under the Info reader.
IMHO this should not happen, but it does; so we live with this, because
the main purpose of this document is to provide an Info version.
@end ignore
@macro ansrfi{NUM}
@srfi{}-\NUM\
@end macro

@c ------------------------------------------------------------

@macro func{NAME}
@code{@sc{\NAME\}}
@end macro

@macro nil{}
@code{()}
@end macro

@macro true{}
@code{#t}
@end macro

@macro false{}
@code{#f}
@end macro

@macro keyword{NAME}
@code{#:\NAME\}
@end macro

@macro class{NAME}
@code{<\NAME\>}
@end macro

@c ------------------------------------------------------------
@c TCL macros.
@c ------------------------------------------------------------

@ifinfo
@macro tclcmd{NAME}
[\NAME\]
@end macro
@end ifinfo

@ifnotinfo
@macro tclcmd{NAME}
@code{[\NAME\]}
@end macro
@end ifnotinfo

@macro tclvar{NAME}
@code{\NAME\}
@end macro

@macro tclcode{CODE}
@code{[\CODE\]}
@end macro

@c ------------------------------------------------------------
@c Macros for references to external documents.
@c ------------------------------------------------------------

@macro glibcref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,libc}
@end macro

@macro rsixref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r6rs}
@end macro

@macro rfiveref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,r5rs}
@end macro

@macro ikarusref{NODE, TITLE}
@ref{\NODE\,\TITLE\,\TITLE\,ikarus}
@end macro

@macro bibref{TAG}
@code{[\TAG\]}
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      C wrapper for RE2

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    CRE2

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           cre2

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2012

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a C
language wrapper for the RE2 library, which is implemented in C++.  RE2
is a fast, safe, thread--friendly alternative to backtracking regular
expression engines like those used in PCRE, Perl, and Python.

The package is distributed under the terms of a @acronym{BSD}--like
license and can be downloaded from:

@center @url{http://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}@*
Copyright @copyright{} 2011 by Keegan McAllister

Portions of this document come from the source code of RE2 itself, see
the file @file{LICENSE.re2} for the license notice.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* cre2: (cre2).                 @value{TITLE}.
@end direntry
@end ifinfo

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* version::                     Version functions.
* options::                     Matching configuration.
* rexes::                       Precompiled regular expressions
                                construction.
* matching::                    Matching regular expressions.

Appendices

* Package License::             Package license.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a C
language wrapper for the RE2 library, which is implemented in C++.  RE2
is a fast, safe, thread--friendly alternative to backtracking regular
expression engines like those used in PCRE, Perl, and Python.

@value{PACKAGE} is based on code by Keegan McAllister for the
@code{haskell-re2} binding:

@center @url{https://github.com/kmcallister/haskell-re2}

@c page
@node version
@chapter Version functions


For an explanation of interface numbers as managed by @gnu{} Libtool
@xref{Libtool versioning, interface, Libtool's versioning system,
libtool, Shared library support for @gnu{}}.


@deftypefun {const char *} cre2_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing
the interface version number.
@end deftypefun


@deftypefun int cre2_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int cre2_version_interface_revision (void)
Return an integer representing the library interface current revision
number.
@end deftypefun


@deftypefun int cre2_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node options
@chapter Matching configuration


@deftp {Opaque Typedef} cre2_options_t
Type of opaque pointers to options objects.
@end deftp


@deftp {Enumeration Typedef} cre2_encoding_t
@cindex @code{CRE2_UTF8}
@cindex @code{CRE2_Latin1}
Enumeration type for constants selecting encoding.  It contains the
following values:

@example
CRE2_UTF8       CRE2_Latin1
@end example
@end deftp


@deftypefun {cre2_options_t *} cre2_opt_new (void)
Allocate and return a new options object.  If memory allocation fails:
the return value is a @cnull{} pointer.
@end deftypefun


@deftypefun void cre2_opt_delete (cre2_options_t * @var{opt})
Finalise an options object.
@end deftypefun


@deftypefun void cre2_opt_posix_syntax (cre2_options_t * @var{opt}, int @var{flag})
Set or unset
@end deftypefun


@deftypefun void cre2_opt_longest_match (cre2_options_t * @var{opt}, int @var{flag})
Set or unset
@end deftypefun


@deftypefun void cre2_opt_log_errors (cre2_options_t * @var{opt}, int @var{flag})
Set or unset
@end deftypefun


@deftypefun void cre2_opt_literal (cre2_options_t * @var{opt}, int @var{flag})
Set or unset
@end deftypefun


@deftypefun void cre2_opt_never_nl (cre2_options_t * @var{opt}, int @var{flag})
Set or unset
@end deftypefun


@deftypefun void cre2_opt_case_sensitive (cre2_options_t * @var{opt}, int @var{flag})
Set or unset
@end deftypefun


@deftypefun void cre2_opt_perl_classes (cre2_options_t * @var{opt}, int @var{flag})
Set or unset
@end deftypefun


@deftypefun void cre2_opt_word_boundary (cre2_options_t * @var{opt}, int @var{flag})
Set or unset
@end deftypefun


@deftypefun void cre2_opt_one_line (cre2_options_t * @var{opt}, int @var{flag})
Set or unset
@end deftypefun


@deftypefun void cre2_opt_encoding (cre2_options_t * @var{opt}, cre2_encoding_t @var{enc})
Set or unset
@end deftypefun


@deftypefun void cre2_opt_max_mem (cre2_options_t * @var{opt}, int @var{m})
Set or unset
@end deftypefun

@c page
@node rexes
@chapter Precompiled regular expressions construction


Regular expression objects are built and finalised as follows:

@example
cre2 *            rex;
cre2_options_t *  opt;

opt = cre2_opt_new();
cre2_opt_posix_syntax(opt, 1);
rex = cre2_new("ciao", 4, opt);
@{
  if (!cre2_error_code(rex))
    /* successfully built */
  else
    /* an error occurred */
@}
cre2_delete(rex);
cre2_opt_delete(opt);
@end example


@deftp {Opaque Type} cre2
Opaque type for regular expression objects; it is meant to be used to
declare pointers to objects.  Instances of this type can be used for any
number of matching operations and are safe for concurrent use by
multiple threads.
@end deftp


@deftp {Struct Typedef} cre2_string_t
Simple data structure used to reference a portion of another string.  It
has the following fields:

@table @code
@item const char * data
Pointer to the first byte in the referenced substring.

@item int length
The number of bytes in the referenced substring.
@end table
@end deftp


@deftypefun {cre2 *} cre2_new (const char * @var{pattern}, int @var{pattern_len}, const cre2_options_t * @var{opt})
Build and return a new regular expression object representing the
@var{pattern} of length @var{pattern_len}; the object is configured with
the options in @var{opt}.  If memory allocation fails: the return value
is a @cnull{} pointer.
@end deftypefun


@deftypefun void cre2_delete (cre2 * @var{rex})
Finalise a regular expression object releasing all the associated
resources.
@end deftypefun


@deftypefun {const char *} cre2_pattern (const cre2 * @var{re})
Whether @var{rex} is a successfully built regular expression object or
not: return a pointer to the pattern string.  The returned pointer is
valid only while @var{rex} is alive: if @cfunc{cre2_delete} is applied
to @var{rex} the pointer becomes invalid.
@end deftypefun


@deftypefun int cre2_num_capturing_groups (const cre2 * @var{rex})
If @var{rex} is a successfully built regular expression object: return a
non--negative integer representing the number of capturing groups in the
pattern.  If an error occurred while building @var{rex}: return
@code{-1}.
@end deftypefun


@deftypefun int cre2_program_size (const cre2 * @var{rex})
If @var{rex} is a successfully built regular expression object: return a
non--negative integer representing the program size, a very approximate
measure of a regexp's ``cost''; larger numbers are more expensive than
smaller numbers.  If an error occurred while building @var{rex}: return
@code{-1}.
@end deftypefun


@deftypefun int cre2_error_code (const cre2 * @var{rex})
In case an error occurred while building @var{rex}: return an integer
representing the associated error code.  Return zero if no error
occurred.
@end deftypefun


@deftypefun {const char *} cre2_error_string (const cre2 * @var{rex})
If an error occurred while building @var{rex}: return a pointer to an
@asciiz{} string representing the associated error message.  The
returned pointer is valid only while @var{rex} is alive: if
@cfunc{cre2_delete} is applied to @var{rex} the pointer becomes invalid.

If @var{rex} is a successfully built regular expression object: return a
pointer to an empty string.

The following code:

@example
cre2 *            rex;
cre2_options_t *  opt;
cre2_string_t     S;

opt = cre2_opt_new();
rex = cre2_new("ci(ao", 5, opt);
@{
  printf("error: code=%d, msg=\"%s\"\n",
         cre2_error_code(rex),
         cre2_error_string(rex));
@}
cre2_delete(rex);
cre2_opt_delete(opt);
@end example

@noindent
prints:

@example
error: code=6, msg="missing ): ci(ao"
@end example
@end deftypefun


@deftypefun void cre2_error_arg (const cre2 * @var{rex}, cre2_string_t * @var{arg})
If an error occurred while building @var{rex}: fill the structure
referenced by @var{arg} with the interval of bytes representing the
offending portion of the pattern.

If @var{rex} is a successfully built regular expression object:
@var{arg} references an empty string.

The following code:

@example
cre2 *            rex;
cre2_options_t *  opt;
cre2_string_t     S;

opt = cre2_opt_new();
rex = cre2_new("ci(ao", 5, opt);
@{
  printf("arg: len=%d, data=\"%s\"\n", S.length, S.data);
@}
cre2_delete(rex);
cre2_opt_delete(opt);
@end example

@noindent
prints:

@example
arg: len=5 data="ci(ao"
@end example
@end deftypefun

@c page
@node matching
@chapter Matching regular expressions


Basic pattern matching goes as follows:

@example
cre2 *            rex;
cre2_options_t *  opt;
const char *      pattern = "(ciao) (hello)";

opt = cre2_opt_new();
cre2_opt_posix_syntax(opt, 1);
rex = cre2_new(pattern, strlen(pattern), opt);
/* error checking omitted */
@{
  const char *   text     = "ciao hello";
  int            text_len = strlen(text);
  int            nmatch   = 3;
  cre2_string_t  match[nmatch];

  cre2_match(rex, text, text_len, 0, text_len, CRE2_UNANCHORED,
             match, nmatch);

  /* prints: full match: ciao hello */
  printf("full match: ");
  fwrite(match[0].data, match[0].length, 1, stdout);
  printf("\n");

  /* prints: first group: ciao */
  printf("first group: ");
  fwrite(match[1].data, match[1].length, 1, stdout);
  printf("\n");

  /* prints: second group: hello */
  printf("second group: ");
  fwrite(match[2].data, match[2].length, 1, stdout);
  printf("\n");
@}
cre2_delete(rex);
cre2_opt_delete(opt);
@end example


@deftp {Enumeration Typedef} cre2_anchor_t
@cindex @code{CRE2_UNANCHORED}
@cindex @code{CRE2_ANCHOR_START}
@cindex @code{CRE2_ANCHOR_BOTH}
Enumeration type for the anchor point of matching operations.  It
contains the following constants:

@example
CRE2_UNANCHORED
CRE2_ANCHOR_START
CRE2_ANCHOR_BOTH
@end example
@end deftp


@deftp {Struct Typedef} cre2_range_t
Structure type used to represent a substring of the text to be matched
as starting and ending indices.  It has the following fields:

@table @code
@item long start
Inclusive start index.

@item long past
Exclusive end index.
@end table
@end deftp


@deftypefun int cre2_match (const cre2 * @var{rex}, const char * @var{text}, int @var{text_len}, int @var{start_pos}, int @var{end_pos}, cre2_anchor_t @var{anchor}, cre2_string_t * @var{match}, int @var{nmatch})
Match a substring of the text referenced by @var{text} and holding
@var{text_len} bytes against the regular expression object @var{rex}.
Return true if the text matched, false otherwise.

The zero--based indices @var{start_pos} (inclusive) and @var{end_pos}
(exclusive) select the substring of @var{text} to be examined.
@var{anchor} selects the anchor point for the matching operation.

Data about the matching groups is stored in the array @var{match}, which
must have at least @var{nmatch} entries.  The first element of
@var{match} (index @math{0}) references the full portion of the
substring of @var{text} which matched, the second element of @var{match}
(index @math{1}) references the portion of text which matched the first
parenthetical subexpression, the third element of @var{match} (index
@math{2}) references the portion of text which matched the second
parenthetical subexpression, and so on.
@end deftypefun


@deftypefun int cre2_easy_match (const char * @var{pattern}, int @var{pattern_len}, const char * @var{text}, int @var{text_len}, cre2_string_t * @var{match}, int @var{nmatch})
Like @cfunc{cre2_match} but expect a pointer to string as pattern.  Also
the text is fully matched without anchoring.

If the text matches the pattern: the return value is @math{1}.  If the
text does not match the pattern: the return value is @math{0}.  If the
pattern is invalid: the return value is @math{2}.
@end deftypefun


@deftypefun void cre2_strings_to_ranges (const char * @var{text}, cre2_range_t * @var{ranges}, cre2_string_t * @var{strings}, int @var{nmatch})
Given an array of @var{strings} with @var{nmatch} elements being the
result of matching @var{text} against a regular expression: fill the
array of @var{ranges} with the index intervals representing the same
results.
@end deftypefun

@c page
@node Package License
@appendix Package license


Copyright @copyright{} 2012 Marco Maggi @email{marco.maggi-ipsu@@poste.it}@*
Copyright @copyright{} 2011 Keegan McAllister@*
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

@enumerate
@item
Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

@item
Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

@item
Neither the name of the author nor the names of his contributors may be
used to endorse or promote products derived from this software without
specific prior written permission.
@end enumerate

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS
IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

@c page

@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references



@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file
